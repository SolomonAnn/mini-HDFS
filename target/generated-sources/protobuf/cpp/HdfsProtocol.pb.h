// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HdfsProtocol.proto

#ifndef PROTOBUF_INCLUDED_HdfsProtocol_2eproto
#define PROTOBUF_INCLUDED_HdfsProtocol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_HdfsProtocol_2eproto 

namespace protobuf_HdfsProtocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_HdfsProtocol_2eproto
namespace cn {
namespace edu {
namespace cn {
namespace tsinghua {
namespace hdfs {
namespace protocol {
class BlockProto;
class BlockProtoDefaultTypeInternal;
extern BlockProtoDefaultTypeInternal _BlockProto_default_instance_;
class IdProto;
class IdProtoDefaultTypeInternal;
extern IdProtoDefaultTypeInternal _IdProto_default_instance_;
class PathProto;
class PathProtoDefaultTypeInternal;
extern PathProtoDefaultTypeInternal _PathProto_default_instance_;
}  // namespace protocol
}  // namespace hdfs
}  // namespace tsinghua
}  // namespace cn
}  // namespace edu
}  // namespace cn
namespace google {
namespace protobuf {
template<> ::cn::edu::cn::tsinghua::hdfs::protocol::BlockProto* Arena::CreateMaybeMessage<::cn::edu::cn::tsinghua::hdfs::protocol::BlockProto>(Arena*);
template<> ::cn::edu::cn::tsinghua::hdfs::protocol::IdProto* Arena::CreateMaybeMessage<::cn::edu::cn::tsinghua::hdfs::protocol::IdProto>(Arena*);
template<> ::cn::edu::cn::tsinghua::hdfs::protocol::PathProto* Arena::CreateMaybeMessage<::cn::edu::cn::tsinghua::hdfs::protocol::PathProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cn {
namespace edu {
namespace cn {
namespace tsinghua {
namespace hdfs {
namespace protocol {

// ===================================================================

class PathProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cn.edu.cn.tsinghua.hdfs.protocol.PathProto) */ {
 public:
  PathProto();
  virtual ~PathProto();

  PathProto(const PathProto& from);

  inline PathProto& operator=(const PathProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathProto(PathProto&& from) noexcept
    : PathProto() {
    *this = ::std::move(from);
  }

  inline PathProto& operator=(PathProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PathProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathProto* internal_default_instance() {
    return reinterpret_cast<const PathProto*>(
               &_PathProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PathProto* other);
  friend void swap(PathProto& a, PathProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathProto* New() const final {
    return CreateMaybeMessage<PathProto>(NULL);
  }

  PathProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PathProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PathProto& from);
  void MergeFrom(const PathProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string src = 1;
  void clear_src();
  static const int kSrcFieldNumber = 1;
  const ::std::string& src() const;
  void set_src(const ::std::string& value);
  #if LANG_CXX11
  void set_src(::std::string&& value);
  #endif
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  ::std::string* mutable_src();
  ::std::string* release_src();
  void set_allocated_src(::std::string* src);

  // bool hasPermission = 2;
  void clear_haspermission();
  static const int kHasPermissionFieldNumber = 2;
  bool haspermission() const;
  void set_haspermission(bool value);

  // @@protoc_insertion_point(class_scope:cn.edu.cn.tsinghua.hdfs.protocol.PathProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr src_;
  bool haspermission_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HdfsProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IdProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cn.edu.cn.tsinghua.hdfs.protocol.IdProto) */ {
 public:
  IdProto();
  virtual ~IdProto();

  IdProto(const IdProto& from);

  inline IdProto& operator=(const IdProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IdProto(IdProto&& from) noexcept
    : IdProto() {
    *this = ::std::move(from);
  }

  inline IdProto& operator=(IdProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IdProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdProto* internal_default_instance() {
    return reinterpret_cast<const IdProto*>(
               &_IdProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IdProto* other);
  friend void swap(IdProto& a, IdProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IdProto* New() const final {
    return CreateMaybeMessage<IdProto>(NULL);
  }

  IdProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IdProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IdProto& from);
  void MergeFrom(const IdProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint32 rpcPort = 2;
  void clear_rpcport();
  static const int kRpcPortFieldNumber = 2;
  ::google::protobuf::uint32 rpcport() const;
  void set_rpcport(::google::protobuf::uint32 value);

  // uint32 socketPort = 3;
  void clear_socketport();
  static const int kSocketPortFieldNumber = 3;
  ::google::protobuf::uint32 socketport() const;
  void set_socketport(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cn.edu.cn.tsinghua.hdfs.protocol.IdProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint32 rpcport_;
  ::google::protobuf::uint32 socketport_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HdfsProtocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlockProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto) */ {
 public:
  BlockProto();
  virtual ~BlockProto();

  BlockProto(const BlockProto& from);

  inline BlockProto& operator=(const BlockProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockProto(BlockProto&& from) noexcept
    : BlockProto() {
    *this = ::std::move(from);
  }

  inline BlockProto& operator=(BlockProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockProto* internal_default_instance() {
    return reinterpret_cast<const BlockProto*>(
               &_BlockProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BlockProto* other);
  friend void swap(BlockProto& a, BlockProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockProto* New() const final {
    return CreateMaybeMessage<BlockProto>(NULL);
  }

  BlockProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlockProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlockProto& from);
  void MergeFrom(const BlockProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string src = 2;
  void clear_src();
  static const int kSrcFieldNumber = 2;
  const ::std::string& src() const;
  void set_src(const ::std::string& value);
  #if LANG_CXX11
  void set_src(::std::string&& value);
  #endif
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  ::std::string* mutable_src();
  ::std::string* release_src();
  void set_allocated_src(::std::string* src);

  // .cn.edu.cn.tsinghua.hdfs.protocol.IdProto id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::cn::edu::cn::tsinghua::hdfs::protocol::IdProto& _internal_id() const;
  public:
  const ::cn::edu::cn::tsinghua::hdfs::protocol::IdProto& id() const;
  ::cn::edu::cn::tsinghua::hdfs::protocol::IdProto* release_id();
  ::cn::edu::cn::tsinghua::hdfs::protocol::IdProto* mutable_id();
  void set_allocated_id(::cn::edu::cn::tsinghua::hdfs::protocol::IdProto* id);

  // uint64 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // uint64 length = 4;
  void clear_length();
  static const int kLengthFieldNumber = 4;
  ::google::protobuf::uint64 length() const;
  void set_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr src_;
  ::cn::edu::cn::tsinghua::hdfs::protocol::IdProto* id_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint64 length_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HdfsProtocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PathProto

// string src = 1;
inline void PathProto::clear_src() {
  src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PathProto::src() const {
  // @@protoc_insertion_point(field_get:cn.edu.cn.tsinghua.hdfs.protocol.PathProto.src)
  return src_.GetNoArena();
}
inline void PathProto::set_src(const ::std::string& value) {
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cn.edu.cn.tsinghua.hdfs.protocol.PathProto.src)
}
#if LANG_CXX11
inline void PathProto::set_src(::std::string&& value) {
  
  src_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cn.edu.cn.tsinghua.hdfs.protocol.PathProto.src)
}
#endif
inline void PathProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cn.edu.cn.tsinghua.hdfs.protocol.PathProto.src)
}
inline void PathProto::set_src(const char* value, size_t size) {
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cn.edu.cn.tsinghua.hdfs.protocol.PathProto.src)
}
inline ::std::string* PathProto::mutable_src() {
  
  // @@protoc_insertion_point(field_mutable:cn.edu.cn.tsinghua.hdfs.protocol.PathProto.src)
  return src_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PathProto::release_src() {
  // @@protoc_insertion_point(field_release:cn.edu.cn.tsinghua.hdfs.protocol.PathProto.src)
  
  return src_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathProto::set_allocated_src(::std::string* src) {
  if (src != NULL) {
    
  } else {
    
  }
  src_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:cn.edu.cn.tsinghua.hdfs.protocol.PathProto.src)
}

// bool hasPermission = 2;
inline void PathProto::clear_haspermission() {
  haspermission_ = false;
}
inline bool PathProto::haspermission() const {
  // @@protoc_insertion_point(field_get:cn.edu.cn.tsinghua.hdfs.protocol.PathProto.hasPermission)
  return haspermission_;
}
inline void PathProto::set_haspermission(bool value) {
  
  haspermission_ = value;
  // @@protoc_insertion_point(field_set:cn.edu.cn.tsinghua.hdfs.protocol.PathProto.hasPermission)
}

// -------------------------------------------------------------------

// IdProto

// string ip = 1;
inline void IdProto::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdProto::ip() const {
  // @@protoc_insertion_point(field_get:cn.edu.cn.tsinghua.hdfs.protocol.IdProto.ip)
  return ip_.GetNoArena();
}
inline void IdProto::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cn.edu.cn.tsinghua.hdfs.protocol.IdProto.ip)
}
#if LANG_CXX11
inline void IdProto::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cn.edu.cn.tsinghua.hdfs.protocol.IdProto.ip)
}
#endif
inline void IdProto::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cn.edu.cn.tsinghua.hdfs.protocol.IdProto.ip)
}
inline void IdProto::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cn.edu.cn.tsinghua.hdfs.protocol.IdProto.ip)
}
inline ::std::string* IdProto::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:cn.edu.cn.tsinghua.hdfs.protocol.IdProto.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdProto::release_ip() {
  // @@protoc_insertion_point(field_release:cn.edu.cn.tsinghua.hdfs.protocol.IdProto.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdProto::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:cn.edu.cn.tsinghua.hdfs.protocol.IdProto.ip)
}

// uint32 rpcPort = 2;
inline void IdProto::clear_rpcport() {
  rpcport_ = 0u;
}
inline ::google::protobuf::uint32 IdProto::rpcport() const {
  // @@protoc_insertion_point(field_get:cn.edu.cn.tsinghua.hdfs.protocol.IdProto.rpcPort)
  return rpcport_;
}
inline void IdProto::set_rpcport(::google::protobuf::uint32 value) {
  
  rpcport_ = value;
  // @@protoc_insertion_point(field_set:cn.edu.cn.tsinghua.hdfs.protocol.IdProto.rpcPort)
}

// uint32 socketPort = 3;
inline void IdProto::clear_socketport() {
  socketport_ = 0u;
}
inline ::google::protobuf::uint32 IdProto::socketport() const {
  // @@protoc_insertion_point(field_get:cn.edu.cn.tsinghua.hdfs.protocol.IdProto.socketPort)
  return socketport_;
}
inline void IdProto::set_socketport(::google::protobuf::uint32 value) {
  
  socketport_ = value;
  // @@protoc_insertion_point(field_set:cn.edu.cn.tsinghua.hdfs.protocol.IdProto.socketPort)
}

// -------------------------------------------------------------------

// BlockProto

// .cn.edu.cn.tsinghua.hdfs.protocol.IdProto id = 1;
inline bool BlockProto::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void BlockProto::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::cn::edu::cn::tsinghua::hdfs::protocol::IdProto& BlockProto::_internal_id() const {
  return *id_;
}
inline const ::cn::edu::cn::tsinghua::hdfs::protocol::IdProto& BlockProto::id() const {
  const ::cn::edu::cn::tsinghua::hdfs::protocol::IdProto* p = id_;
  // @@protoc_insertion_point(field_get:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto.id)
  return p != NULL ? *p : *reinterpret_cast<const ::cn::edu::cn::tsinghua::hdfs::protocol::IdProto*>(
      &::cn::edu::cn::tsinghua::hdfs::protocol::_IdProto_default_instance_);
}
inline ::cn::edu::cn::tsinghua::hdfs::protocol::IdProto* BlockProto::release_id() {
  // @@protoc_insertion_point(field_release:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto.id)
  
  ::cn::edu::cn::tsinghua::hdfs::protocol::IdProto* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::cn::edu::cn::tsinghua::hdfs::protocol::IdProto* BlockProto::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::cn::edu::cn::tsinghua::hdfs::protocol::IdProto>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto.id)
  return id_;
}
inline void BlockProto::set_allocated_id(::cn::edu::cn::tsinghua::hdfs::protocol::IdProto* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto.id)
}

// string src = 2;
inline void BlockProto::clear_src() {
  src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockProto::src() const {
  // @@protoc_insertion_point(field_get:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto.src)
  return src_.GetNoArena();
}
inline void BlockProto::set_src(const ::std::string& value) {
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto.src)
}
#if LANG_CXX11
inline void BlockProto::set_src(::std::string&& value) {
  
  src_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto.src)
}
#endif
inline void BlockProto::set_src(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto.src)
}
inline void BlockProto::set_src(const char* value, size_t size) {
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto.src)
}
inline ::std::string* BlockProto::mutable_src() {
  
  // @@protoc_insertion_point(field_mutable:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto.src)
  return src_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockProto::release_src() {
  // @@protoc_insertion_point(field_release:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto.src)
  
  return src_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockProto::set_allocated_src(::std::string* src) {
  if (src != NULL) {
    
  } else {
    
  }
  src_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto.src)
}

// uint64 offset = 3;
inline void BlockProto::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BlockProto::offset() const {
  // @@protoc_insertion_point(field_get:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto.offset)
  return offset_;
}
inline void BlockProto::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto.offset)
}

// uint64 length = 4;
inline void BlockProto::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BlockProto::length() const {
  // @@protoc_insertion_point(field_get:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto.length)
  return length_;
}
inline void BlockProto::set_length(::google::protobuf::uint64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:cn.edu.cn.tsinghua.hdfs.protocol.BlockProto.length)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace hdfs
}  // namespace tsinghua
}  // namespace cn
}  // namespace edu
}  // namespace cn

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_HdfsProtocol_2eproto
